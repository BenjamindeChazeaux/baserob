<div class="dashboard-container" data-controller="quick-start">

  <!-- Main Content -->
  <div class="main-content">
    <!-- Header -->
    <header class="dashboard-header">
      <div class="header-top">
        <div class="welcome-text">
          <h1>Welcome on Baserob</h1>
          <p class="date"><%= Date.today.strftime("%A %d %B %Y") %></p>
        </div>
      </div>
      <!-- Modern Search Bar -->
      <div class="search-bar-container">
        <div class="search-bar modern-search-bar">
          <i class="fas fa-search"></i>
          <input type="text" placeholder="Search for actions, models, data sources..." class="search-input modern-input">
          <span class="keyboard-shortcut">⌘ K</span>
        </div>
      </div>
    </header>

    <!-- Quick Actions Grid -->
    <section class="quick-actions">
      <div class="cards-grid">
        <!-- Quick start Card -->
        <div class="action-card">
          <div class="card-header">
            <div class="card-badge">New</div>
          </div>
          <h3>Quick tracking setup</h3>
          <p>Generate your tracking dashboard in one click from your own data</p>
          <a href="#" class="card-action" 
          data-controller="quick-start"
          data-action="click->quick-start#openModal" 
          id="openModalButton"
          style="font-size: 1.5em;">
            <i class="fi fi-rr-angle-square-right"></i>
          </a>
        </div>

        <!-- Quick Start GEO Scoring Card -->
        <div class="action-card">
          <div class="card-header">
            <div class="card-badge">New</div>
          </div>
          <h3>GEO Scoring</h3>
          <p>Configure the AI requests and LLM you want to watch</p>
          <div class="url-input">
            <input type="url" placeholder="Tape your AI request">
            <button class="btn-secondary">
              <i class="fas fa-play"></i>
              Score
            </button>
          </div>
          <a href="#" class="card-action">
            Advanced configuration
            <i class="fas fa-arrow-right"></i>
          </a>
        </div>

        <!-- GEO Scoring Card -->
        <div class="action-card">
          <div class="card-header">
          </div>
          <h3>GEO Scoring</h3>
          <div class="geo-preview">
            <canvas id="geoChart" height="120"></canvas>
          </div>
          <a href="<%= geo_scorings_path %>" class="card-action">
            See details
            <i class="fas fa-arrow-right"></i>
          </a>
        </div>
      </div>
    </section>

    <!-- Help & Resources -->
    <section class="resources-section">
      <div class="section-header">
        <h2>Resources & Support</h2>
        <p>Get help to start</p>
      </div>

      <div class="resources-grid">
        <!-- Documentation -->
        <div class="resource-card">
          <div class="resource-icon">
            <i class="fas fa-book"></i>
          </div>
          <div class="resource-content">
            <h3>Documentation</h3>
            <p>Detailed guides and API references</p>
            <a href="#" class="resource-link">Consulter <i class="fas fa-chevron-right"></i></a>
          </div>
        </div>

        <!-- Video Tutorials -->
        <div class="resource-card">
          <div class="resource-icon">
            <i class="fas fa-video"></i>
          </div>
          <div class="resource-content">
            <h3>Video Tutorials</h3>
            <p>Learn by example</p>
            <a href="#" class="resource-link">Watch <i class="fas fa-chevron-right"></i></a>
          </div>
        </div>

        <!-- Support -->
        <div class="resource-card">
          <div class="resource-icon">
            <i class="fas fa-headset"></i>
          </div>
          <div class="resource-content">
            <h3>Support</h3>
            <p>Get personalized help</p>
            <a href="#" class="resource-link">Contact <i class="fas fa-chevron-right"></i></a>
          </div>
        </div>
      </div>
    </section>
  </div>
</div>

<%= render "shared/quick_start_modal" %>

<%= javascript_include_tag "geo_chart" %>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, setting up modal button');
    
    // Get the button and modal
    const openButton = document.getElementById('openModalButton');
    const modal = document.getElementById('quickStartModal');
    
    if (openButton && modal) {
      console.log('Button and modal found');
      
      // Add click event listener to the button
      openButton.addEventListener('click', function(e) {
        e.preventDefault();
        console.log('Button clicked, opening modal');
        modal.classList.add('active');
        document.body.style.overflow = 'hidden';
      });
      
      // Add click event listener to close button
      const closeButton = modal.querySelector('.close-modal');
      if (closeButton) {
        closeButton.addEventListener('click', function() {
          console.log('Close button clicked');
          modal.classList.remove('active');
          document.body.style.overflow = '';
        });
      }
      
      // Close modal when clicking outside
      modal.addEventListener('click', function(e) {
        if (e.target === modal) {
          console.log('Clicked outside modal');
          modal.classList.remove('active');
          document.body.style.overflow = '';
        }
      });
      
      // Setup stepper functionality
      let currentStep = 1;
      const totalSteps = modal.querySelectorAll('.step').length;
      const prevButton = document.getElementById('prevStep');
      const nextButton = document.getElementById('nextStep');
      const finishButton = document.getElementById('finishSetup');
      
      // Function to go to a specific step
      function goToStep(stepNumber) {
        currentStep = stepNumber;
        
        // Update step indicators
        modal.querySelectorAll('.step').forEach((step, index) => {
          const stepNum = index + 1;
          
          if (stepNum === currentStep) {
            step.classList.add('active');
            step.classList.remove('completed');
          } else if (stepNum < currentStep) {
            step.classList.remove('active');
            step.classList.add('completed');
          } else {
            step.classList.remove('active');
            step.classList.remove('completed');
          }
        });
        
        // Update step content
        modal.querySelectorAll('.step-content').forEach((content) => {
          if (parseInt(content.dataset.step) === currentStep) {
            content.classList.add('active');
          } else {
            content.classList.remove('active');
          }
        });
        
        // Update buttons
        prevButton.disabled = currentStep === 1;
        
        if (currentStep === totalSteps) {
          nextButton.style.display = 'none';
          finishButton.style.display = 'block';
        } else {
          nextButton.style.display = 'block';
          finishButton.style.display = 'none';
        }
      }
      
      // Add click event listeners to next and previous buttons
      if (nextButton) {
        nextButton.addEventListener('click', function(e) {
          e.preventDefault();
          if (currentStep < totalSteps) {
            goToStep(currentStep + 1);
          }
        });
      }
      
      if (prevButton) {
        prevButton.addEventListener('click', function(e) {
          e.preventDefault();
          if (currentStep > 1) {
            goToStep(currentStep - 1);
          }
        });
      }
      
      if (finishButton) {
        finishButton.addEventListener('click', function(e) {
          e.preventDefault();
          modal.classList.remove('active');
          document.body.style.overflow = '';
          
          // Show success notification
          const notification = document.createElement('div');
          notification.className = 'notification success';
          notification.innerHTML = `
            <i class="fas fa-check-circle"></i>
            <div class="notification-content">
              <h4>Dashboard Created!</h4>
              <p>Your new dashboard has been set up successfully.</p>
            </div>
            <button class="close-notification">&times;</button>
          `;
          document.body.appendChild(notification);
          
          // Add click event listener to close notification
          notification.querySelector('.close-notification').addEventListener('click', function() {
            notification.classList.add('fade-out');
            setTimeout(() => {
              notification.remove();
            }, 300);
          });
          
          // Remove notification after 5 seconds
          setTimeout(() => {
            notification.classList.add('fade-out');
            setTimeout(() => {
              notification.remove();
            }, 300);
          }, 5000);
        });
      }
      
      // Add click event listeners to selectable items
      modal.querySelectorAll('.data-source-card, .template-card, .color-option').forEach(item => {
        item.addEventListener('click', function() {
          const parent = this.parentElement;
          
          // If it's a single-select container
          if (parent.classList.contains('single-select')) {
            parent.querySelectorAll('.selected').forEach(el => {
              el.classList.remove('selected');
            });
          }
          
          this.classList.toggle('selected');
        });
      });
    } else {
      console.error('Button or modal not found', { 
        buttonFound: !!openButton, 
        modalFound: !!modal 
      });
    }
  });
</script>

<!-- Debug Script -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Debug script loaded');
    
    // Vérifier si le modal existe
    const modal = document.getElementById('quickStartModal');
    console.log('Modal found:', modal);
    
    // Vérifier si le bouton d'ouverture existe
    const openButton = document.getElementById('openModalButton');
    console.log('Open button found:', openButton);
    
    // Vérifier si le bouton de test existe
    const testButton = document.getElementById('testOpenModalButton');
    console.log('Test button found:', testButton);
    
    // Vérifier si le panneau de script existe
    const scriptPanel = document.getElementById('scriptContentPanel');
    console.log('Script panel found:', scriptPanel);
    
    // Ajouter un écouteur d'événement direct au bouton de test
    if (testButton) {
      testButton.addEventListener('click', function() {
        console.log('Test button clicked directly');
        if (modal) {
          modal.classList.add('active');
          console.log('Modal activated directly');
        }
      });
    }
    
    // Ajouter un écouteur d'événement direct au bouton de visualisation du script
    const viewScriptButton = document.getElementById('viewScriptButton');
    if (viewScriptButton) {
      console.log('View script button found:', viewScriptButton);
      viewScriptButton.addEventListener('click', function(e) {
        console.log('View script button clicked directly');
        e.preventDefault();
        if (scriptPanel) {
          if (scriptPanel.style.display === 'none' || scriptPanel.style.display === '') {
            scriptPanel.style.display = 'block';
            console.log('Script panel shown directly');
          } else {
            scriptPanel.style.display = 'none';
            console.log('Script panel hidden directly');
          }
        }
      });
    }
  });
</script>

